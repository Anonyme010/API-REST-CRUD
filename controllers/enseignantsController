const { getConnection } = require('../entities/enseignants');

// Récupérer tous les enseignants
async function getEnseignants(req, res) {
  try {
    const connection = await getConnection();
    const [rows] = await connection.execute('SELECT * FROM enseignants');
    res.status(200).json(rows);
    await connection.end();
  } catch (err) {
    res.status(500).json({ error: 'Erreur lors de la récupération des enseignants' });
  }
}

// Ajouter un nouvel enseignant
async function createEnseignant(req, res) {
  const { nom, prenom, email, matiere } = req.body;

  if (!nom || !prenom || !email || !matiere) {
    return res.status(400).json({ error: 'Tous les champs sont requis' });
  }

  try {
    const connection = await getConnection();
    const [result] = await connection.execute(
      'INSERT INTO enseignants (nom, prenom, email, matiere) VALUES (?, ?, ?, ?)',
      [nom, prenom, email, matiere]
    );
    res.status(201).json({ message: 'Enseignant ajouté avec succès' });
    await connection.end();
  } catch (err) {
    console.error('Erreur lors de l\'ajout de l\'enseignant:', err.message);
    res.status(500).json({ error: 'Erreur lors de l\'ajout de l\'enseignant' });
  }
}

// Mettre à jour un enseignant
async function updateEnseignant(req, res) {
    const { id } = req.params;
    const { nom, prenom, email } = req.body;
  
    try {
      const connection = await getConnection();
  
      // Vérifier si l'enseignant existe dans la base de données
      const [rows] = await connection.execute(
        'SELECT * FROM enseignants WHERE id = ?',
        [id]
      );
  
      if (rows.length === 0) {
        return res.status(404).json({ error: 'Enseignant introuvable' });
      }
  
      // Mettre à jour l'enseignant
      await connection.execute(
        'UPDATE enseignants SET nom = ?, prenom = ?, email = ? WHERE id = ?',
        [nom, prenom, email, id]
      );
  
      res.status(200).json({ message: 'Enseignant mis à jour avec succès' });
  
      await connection.end();
    } catch (err) {
      res.status(500).json({ error: 'Erreur lors de la mise à jour de l\'enseignant' });
    }
  }
  

// Supprimer un enseignant
async function deleteEnseignant(req, res) {
    const { id } = req.params;
  
    try {
      const connection = await getConnection();
  
      // Vérifier si l'enseignant existe dans la base de données
      const [rows] = await connection.execute(
        'SELECT * FROM enseignants WHERE id = ?',
        [id]
      );
  
      // Si l'enseignant n'existe pas, renvoyer un message d'erreur
      if (rows.length === 0) {
        return res.status(404).json({ error: 'Enseignant introuvable' });
      }
  
      // Si l'enseignant existe, procéder à la suppression
      await connection.execute(
        'DELETE FROM enseignants WHERE id = ?',
        [id]
      );
  
      // Renvoyer une réponse de succès
      res.status(200).json({ message: 'Enseignant supprimé avec succès' });
  
      await connection.end();
    } catch (err) {
      res.status(500).json({ error: 'Erreur lors de la suppression de l\'enseignant' });
    }
  }
  

module.exports = { getEnseignants, createEnseignant, updateEnseignant, deleteEnseignant };
